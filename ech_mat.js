/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI53497 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53004 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53203 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI37244 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI53218 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI53005 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI53002 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI53009 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53102 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI53005 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nume", len: 0, typ: NTI104, name: "nume", sons: null}, 
{kind: 1, offset: "deno", len: 0, typ: NTI104, name: "deno", sons: null}]};
NTI53005.node = NNI53005;
NTI53002.base = NTI53005;
NTI53009.base = NTI53002;
NTI53102.base = NTI53009;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3656.base = NTI3626;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
NTI53218.base = NTI53002;
var NNI3648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3648.node = NNI3648;
NTI3648.base = NTI3626;
NTI37244.base = NTI138;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3640.base = NTI3626;
NTI3644.base = NTI3640;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3626;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3640;
NTI53203.base = NTI53002;
NTI53004.base = NTI53009;
NTI53497.base = NTI53002;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr([48, 57]);

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function negInt(a_19803) {
	var result_19804 = 0;

		result_19804 = (a_19803 * -1);

	return result_19804;

}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function absInt(a_19811) {
		var Tmp1;

	var result_19812 = 0;

		if ((a_19811 < 0)) {
		Tmp1 = (a_19811 * -1);
		}
		else {
		Tmp1 = a_19811;
		}
		
		result_19812 = Tmp1;

	return result_19812;

}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function sysFatal_23221(message_23227) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_23229 = null;
		F.line = 2831;
		e_23229 = {m_type: NTI3648, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_23229.message = nimCopy(null, message_23227, NTI138);
		F.line = 2833;
		raiseException(e_23229, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_23216(msg_23218) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3771;
		sysFatal_23221(msg_23218);
	framePtr = F.prev;

	
}

function substrEq_36204(s_36206, pos_36207, substr_36208) {
	var result_36209 = false;

	BeforeRet: do {
		var i_36210 = 0;
		var length_36211 = (substr_36208 != null ? substr_36208.length-1 : 0);
		L1: do {
				L2: while (true) {
				if (!((i_36210 < length_36211) && (s_36206[(pos_36207 + i_36210)] == substr_36208[i_36210]))) break L2;
					i_36210 += 1;
				}
		} while(false);
		result_36209 = (i_36210 == length_36211);
		break BeforeRet;
	} while (false);

	return result_36209;

}

function nsuSplitString(s_37223, sep_37224, maxsplit_37225) {
	var result_37227 = null;

		if (!((0 < (sep_37224 != null ? sep_37224.length-1 : 0)))) {
		raiseAssert_23216(makeNimstrLit("\x0A0 < len(sep) "));
		}
		
		result_37227 = nimCopy(null, [], NTI37244);
		L1: do {
			var x_37246 = null;
			var last_37261 = 0;
			var splits_37263 = maxsplit_37225;
			L2: do {
					L3: while (true) {
					if (!(last_37261 <= (s_37223 != null ? s_37223.length-1 : 0))) break L3;
						var first_37265 = last_37261;
						L4: do {
								L5: while (true) {
								if (!((last_37261 < (s_37223 != null ? s_37223.length-1 : 0)) && !(substrEq_36204(s_37223, last_37261, sep_37224)))) break L5;
									last_37261 += 1;
								}
						} while(false);
						if ((splits_37263 == 0)) {
						last_37261 = (s_37223 != null ? s_37223.length-1 : 0);
						}
						
						x_37246 = (s_37223.slice(first_37265, ((last_37261 - 1))+1).concat(0));
						var Tmp6 = nimCopy(null, x_37246, NTI138);
						if (result_37227 != null) { result_37227.push(Tmp6); } else { result_37227 = [Tmp6]; };
						if ((splits_37263 == 0)) {
						break L2;
						}
						
						splits_37263 -= 1;
						last_37261 += (sep_37224 != null ? sep_37224.length-1 : 0);
					}
			} while(false);
		} while(false);

	return result_37227;

}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function rawParseInt_27995(s_27997, b_27999, b_27999_Idx, start_28000) {
	var result_28001 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"lib\\pure\\parseutils.nim",line:0};
	framePtr = F;
		F.line = 232;
		var sign_28002 = -1;
		F.line = 233;
		var i_28003 = start_28000;
		if ((s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 43)) {
		F.line = 234;
		i_28003 = addInt(i_28003, 1);
		}
		else {
		if ((s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 45)) {
		F.line = 236;
		i_28003 = addInt(i_28003, 1);
		F.line = 237;
		sign_28002 = 1;
		}
		}
		if ((ConstSet2[s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0]] != undefined)) {
		F.line = 239;
		b_27999[b_27999_Idx] = 0;
		L1: do {
			F.line = 240;
				L2: while (true) {
				if (!(ConstSet3[s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0]] != undefined)) break L2;
					F.line = 241;
					b_27999[b_27999_Idx] = subInt(mulInt(b_27999[b_27999_Idx], 10), subInt(s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0], 48));
					F.line = 242;
					i_28003 = addInt(i_28003, 1);
					L3: do {
						F.line = 243;
							L4: while (true) {
							if (!(s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 95)) break L4;
								F.line = 243;
								i_28003 = addInt(i_28003, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 244;
		b_27999[b_27999_Idx] = mulInt(b_27999[b_27999_Idx], sign_28002);
		F.line = 245;
		result_28001 = subInt(i_28003, start_28000);
		}
		
	framePtr = F.prev;

	return result_28001;

}

function npuParseBiggestInt(s_28077, number_28079, number_28079_Idx, start_28080) {
	var result_28081 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"lib\\pure\\parseutils.nim",line:0};
	framePtr = F;
		F.line = 253;
		var res_28082 = [0];
		F.line = 256;
		result_28081 = rawParseInt_27995(s_28077, res_28082, 0, start_28080);
		F.line = 257;
		number_28079[number_28079_Idx] = res_28082[0];
	framePtr = F.prev;

	return result_28081;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function npuParseInt(s_28087, number_28089, number_28089_Idx, start_28090) {
			var Tmp1;
				var Tmp2;

	var result_28091 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"lib\\pure\\parseutils.nim",line:0};
	framePtr = F;
		F.line = 264;
		var res_28092 = [0];
		F.line = 265;
		result_28091 = npuParseBiggestInt(s_28087, res_28092, 0, start_28090);
			if (!true) Tmp1 = false; else {				if ((res_28092[0] < -2147483648)) Tmp2 = true; else {					Tmp2 = (2147483647 < res_28092[0]);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 268;
		F.line = 2810;
		var e_28119 = null;
		F.line = 2811;
		e_28119 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_28119.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
		F.line = 2813;
		e_28119.parent = null;
		raiseException(e_28119, "OverflowError");
		}
		else {
		if (!((result_28091 == 0))) {
		F.line = 270;
		number_28089[number_28089_Idx] = chckRange(res_28092[0], -2147483648, 2147483647);
		}
		}
	framePtr = F.prev;

	return result_28091;

}

function nsuParseInt(s_37589) {
			var Tmp1;

	var result_37590 = [0];

		var L_37592 = npuParseInt(s_37589, result_37590, 0, 0);
			if (!((L_37592 == (s_37589 != null ? s_37589.length-1 : 0)))) Tmp1 = true; else {				Tmp1 = (L_37592 == 0);			}		if (Tmp1) {
		var e_37599 = null;
		e_37599 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
		e_37599.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_37589), NTI138);
		e_37599.parent = null;
		raiseException(e_37599, "ValueError");
		}
		

	return result_37590[0];

}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function gcd_53016(a_53018, b_53019) {
	var result_53020 = 0;

	var F={procname:"ech_mat.gcd",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		var x_53021 = a_53018;
		F.line = 16;
		var y_53022 = b_53019;
		L1: do {
			F.line = 17;
				L2: while (true) {
				if (!true) break L2;
					if ((y_53022 < x_53021)) {
					F.line = 19;
					x_53021 = modInt(x_53021, y_53022);
					if ((x_53021 == 0)) {
					F.line = 21;
					result_53020 = y_53022;
					break BeforeRet;
					}
					
					}
					else {
						F.line = 23;
						y_53022 = modInt(y_53022, x_53021);
						if ((y_53022 == 0)) {
						F.line = 25;
						result_53020 = x_53021;
						break BeforeRet;
						}
						
					}
					
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_53020;

}

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function red_53024(p_53026) {
	var result_53027 = null;

	var F={procname:"ech_mat.red",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 29;
		var n_53028 = p_53026.nume;
		F.line = 30;
		var d_53029 = p_53026.deno;
		F.line = 31;
		var g_53030 = gcd_53016(absInt(n_53028), absInt(d_53029));
		F.line = 32;
		result_53027 = {nume: ((slash__22207(n_53028, g_53030))|0), deno: ((slash__22207(d_53029, g_53030))|0)};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53027;

}

function ratioNew_53038(a_53040, b_53041) {
	var result_53042 = null;

	var F={procname:"ech_mat.ratioNew",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 42;
		var n_53043 = a_53040;
		F.line = 43;
		var d_53044 = b_53041;
		if ((d_53044 == 0)) {
		F.line = 46;
		result_53042 = {nume: 1, deno: 0};
		break BeforeRet;
		}
		
		if ((n_53043 == 0)) {
		F.line = 48;
		result_53042 = {nume: 0, deno: 1};
		break BeforeRet;
		}
		
		if ((d_53044 < 0)) {
		F.line = 51;
		n_53043 = negInt(n_53043);
		F.line = 52;
		d_53044 = negInt(d_53044);
		}
		
		F.line = 54;
		result_53042 = {nume: n_53043, deno: d_53044};
		F.line = 55;
		result_53042 = red_53024(result_53042);
	} while (false);
	framePtr = F.prev;

	return result_53042;

}

function parseRatio_53068(s_53070) {
	var result_53071 = null;

	var F={procname:"ech_mat.parseRatio",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 71;
		var sp_53072 = nsuSplitString(s_53070, makeNimstrLit("/"), -1);
		F.line = 72;
		var n_53073 = 1;
		F.line = 72;
		var d_53074 = 1;
		F.line = 73;
		n_53073 = nsuParseInt(sp_53072[chckIndx(0, 0, sp_53072.length+0-1)-0]);
		if (((sp_53072 != null ? sp_53072.length : 0) == 2)) {
		F.line = 74;
		d_53074 = nsuParseInt(sp_53072[chckIndx(1, 0, sp_53072.length+0-1)-0]);
		}
		
		F.line = 75;
		result_53071 = ratioNew_53038(n_53073, d_53074);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53071;

}

function failedAssertImpl_23239(msg_23241) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3778;
		raiseAssert_23216(msg_23241);
	framePtr = F.prev;

	
}

function parseMatrix_53082(mat_s_53086) {
	var result_53087 = null;

	var F={procname:"ech_mat.parseMatrix",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
		F.line = 78;
		result_53087 = nimCopy(null, [], NTI53102);
		L1: do {
			F.line = 79;
			var row_s_53202 = null;
			F.line = 3805;
			var i_53433 = 0;
			F.line = 3806;
			var L_53435 = (mat_s_53086 != null ? mat_s_53086.length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_53433 < L_53435)) break L3;
						F.line = 3808;
						row_s_53202 = mat_s_53086[chckIndx(i_53433, 0, mat_s_53086.length+0-1)-0];
						F.line = 80;
						var row_53219 = nimCopy(null, [], NTI53218);
						L4: do {
							F.line = 81;
							var elm_53402 = null;
							F.line = 3805;
							var i_53428 = 0;
							F.line = 3806;
							var L_53430 = (row_s_53202 != null ? row_s_53202.length : 0);
							L5: do {
								F.line = 3807;
									L6: while (true) {
									if (!(i_53428 < L_53430)) break L6;
										F.line = 3808;
										elm_53402 = row_s_53202[chckIndx(i_53428, 0, row_s_53202.length+0-1)-0];
										F.line = 82;
										if (row_53219 != null) { row_53219.push(parseRatio_53068(cstrToNimstr(elm_53402))); } else { row_53219 = [parseRatio_53068(cstrToNimstr(elm_53402))]; };
										F.line = 3809;
										i_53428 = addInt(i_53428, 1);
										if (!(((row_s_53202 != null ? row_s_53202.length : 0) == L_53430))) {
										F.line = 3810;
										failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 83;
						var Tmp7 = nimCopy(null, row_53219, NTI53203);
						if (result_53087 != null) { result_53087.push(Tmp7); } else { result_53087 = [Tmp7]; };
						F.line = 3809;
						i_53433 = addInt(i_53433, 1);
						if (!(((mat_s_53086 != null ? mat_s_53086.length : 0) == L_53435))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_53087;

}

function map_53485(s_53491, op_53496) {
	var result_53498 = null;

	var F={procname:"map.map",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
		F.line = 217;
		result_53498 = new Array(chckRange((s_53491 != null ? s_53491.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_53491 != null ? s_53491.length : 0), 0, 2147483647);++i) {result_53498[i]=null;}		L1: do {
			F.line = 218;
			var i_53529 = 0;
			F.line = 3518;
			var colontmp__53533 = 0;
			F.line = 218;
			colontmp__53533 = (s_53491 != null ? s_53491.length : 0);
			F.line = 3519;
			var i_53536 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_53536 < colontmp__53533)) break L3;
						F.line = 3521;
						i_53529 = i_53536;
						F.line = 219;
						result_53498[chckIndx(i_53529, 0, result_53498.length+0-1)-0] = op_53496(s_53491[chckIndx(i_53529, 0, s_53491.length+0-1)-0]);
						F.line = 3522;
						i_53536 = addInt(i_53536, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_53498;

}

function slash__53063(p_53065, q_53066) {
	var result_53067 = null;

	var F={procname:"ech_mat./",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 67;
		result_53067 = ratioNew_53038(mulInt(p_53065.nume, q_53066.deno), mulInt(p_53065.deno, q_53066.nume));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53067;

}

function minus__53053(p_53055, q_53056) {
	var result_53057 = null;

	var F={procname:"ech_mat.-",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 61;
		result_53057 = ratioNew_53038(subInt(mulInt(p_53055.nume, q_53056.deno), mulInt(p_53055.deno, q_53056.nume)), mulInt(p_53055.deno, q_53056.deno));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53057;

}

function star__53058(p_53060, q_53061) {
	var result_53062 = null;

	var F={procname:"ech_mat.*",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 64;
		result_53062 = ratioNew_53038(mulInt(p_53060.nume, q_53061.nume), mulInt(p_53060.deno, q_53061.deno));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53062;

}

function echelonize_53436(mat_53438) {

										function colonanonymous__53479(r_53481) {
											var result_53482 = null;

											var F={procname:"echelonize.:anonymous",prev:framePtr,filename:"ech_mat.nim",line:0};
											framePtr = F;
												F.line = 105;
												result_53482 = slash__53063(r_53481, a_53467);
											framePtr = F.prev;

											return result_53482;

										}

	var result_53439 = null;

	var F={procname:"ech_mat.echelonize",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
		F.line = 88;
		result_53439 = nimCopy(null, mat_53438, NTI53004);
		F.line = 90;
		var row_num_53447 = (result_53439 != null ? result_53439.length : 0);
		F.line = 91;
		var col_num_53455 = (result_53439[chckIndx(0, 0, result_53439.length+0-1)-0] != null ? result_53439[chckIndx(0, 0, result_53439.length+0-1)-0].length : 0);
		F.line = 94;
		var i_53456 = 0;
		F.line = 94;
		var j_53457 = 0;
		L1: do {
			F.line = 95;
				L2: while (true) {
				if (!((j_53457 < col_num_53455) && (i_53456 < row_num_53447))) break L2;
					L3: do {
						F.line = 96;
						var k_53466 = 0;
						F.line = 3519;
						var i_53592 = i_53456;
						L4: do {
							F.line = 3520;
								L5: while (true) {
								if (!(i_53592 < row_num_53447)) break L5;
									F.line = 3521;
									k_53466 = i_53592;
									L6: do {
										F.line = 97;
										var a_53467 = result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0][chckIndx(j_53457, 0, result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0].length+0-1)-0];
										if ((a_53467.nume == 0)) {
										if ((k_53466 < subInt(row_num_53447, 1))) {
										F.line = 100;
										break L6;
										}
										else {
											F.line = 102;
											j_53457 = addInt(j_53457, 1);
											F.line = 103;
											break L3;
										}
										
										}
										
										F.line = 105;
										result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0] = nimCopy(null, map_53485(result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0], colonanonymous__53479), NTI53497);
										L7: do {
											F.line = 107;
											var p_53546 = 0;
											F.line = 3519;
											var i_53588 = 0;
											L8: do {
												F.line = 3520;
													L9: while (true) {
													if (!(i_53588 < row_num_53447)) break L9;
														F.line = 3521;
														p_53546 = i_53588;
														if (!((p_53546 == k_53466))) {
														F.line = 109;
														var t_53547 = result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0][chckIndx(j_53457, 0, result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0].length+0-1)-0];
														L10: do {
															F.line = 110;
															var q_53556 = 0;
															F.line = 3519;
															var i_53584 = j_53457;
															L11: do {
																F.line = 3520;
																	L12: while (true) {
																	if (!(i_53584 < col_num_53455)) break L12;
																		F.line = 3521;
																		q_53556 = i_53584;
																		F.line = 111;
																		result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0][chckIndx(q_53556, 0, result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0].length+0-1)-0] = minus__53053(result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0][chckIndx(q_53556, 0, result_53439[chckIndx(p_53546, 0, result_53439.length+0-1)-0].length+0-1)-0], star__53058(result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0][chckIndx(q_53556, 0, result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0].length+0-1)-0], t_53547));
																		F.line = 3522;
																		i_53584 = addInt(i_53584, 1);
																	}
															} while(false);
														} while(false);
														}
														
														F.line = 3522;
														i_53588 = addInt(i_53588, 1);
													}
											} while(false);
										} while(false);
										F.line = 113;
										var __53557 = {Field0: result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0], Field1: result_53439[chckIndx(i_53456, 0, result_53439.length+0-1)-0]};
										F.line = 113;
										result_53439[chckIndx(i_53456, 0, result_53439.length+0-1)-0] = nimCopy(null, __53557["Field0"], NTI53009);
										F.line = 113;
										result_53439[chckIndx(k_53466, 0, result_53439.length+0-1)-0] = nimCopy(null, __53557["Field1"], NTI53009);
										F.line = 114;
										i_53456 = addInt(i_53456, 1);
										F.line = 115;
										j_53457 = addInt(j_53457, 1);
										F.line = 116;
										break L3;
									} while(false);
									F.line = 3522;
									i_53592 = addInt(i_53592, 1);
								}
						} while(false);
					} while(false);
				}
		} while(false);
	framePtr = F.prev;

	return result_53439;

}

function nsuInitSkipTable(a_39679, sub_39680) {
		var m_39681 = (sub_39680 != null ? sub_39680.length-1 : 0);
		var m1_39682 = (m_39681 + 1);
		var i_39683 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_39683 <= 248)) break L2;
					a_39679[(i_39683 + 0)] = m1_39682;
					a_39679[(i_39683 + 1)] = m1_39682;
					a_39679[(i_39683 + 2)] = m1_39682;
					a_39679[(i_39683 + 3)] = m1_39682;
					a_39679[(i_39683 + 4)] = m1_39682;
					a_39679[(i_39683 + 5)] = m1_39682;
					a_39679[(i_39683 + 6)] = m1_39682;
					a_39679[(i_39683 + 7)] = m1_39682;
					i_39683 += 8;
				}
		} while(false);
		L3: do {
			var i_39705 = 0;
			var colontmp__39708 = 0;
			colontmp__39708 = (m_39681 - 1);
			var res_39711 = 0;
			L4: do {
					L5: while (true) {
					if (!(res_39711 <= colontmp__39708)) break L5;
						i_39705 = res_39711;
						a_39679[sub_39680[i_39705]] = (m_39681 - i_39705);
						res_39711 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_39717, s_39718, sub_39719, start_39720, last_39721) {
		var Tmp1;

	var result_39722 = 0;

	BeforeRet: do {
		if ((last_39721 == 0)) {
		Tmp1 = (s_39718 != null ? (s_39718.length-2) : -1);
		}
		else {
		Tmp1 = last_39721;
		}
		
		var last_39724 = Tmp1;
		var m_39725 = (sub_39719 != null ? sub_39719.length-1 : 0);
		var n_39726 = (last_39724 + 1);
		var j_39727 = start_39720;
		L2: do {
				L3: while (true) {
				if (!(j_39727 <= (n_39726 - m_39725))) break L3;
					L4: do {
						L5: do {
							var k_39737 = 0;
							var colontmp__39749 = 0;
							colontmp__39749 = (m_39725 - 1);
							var res_39752 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_39752 <= colontmp__39749)) break L7;
										k_39737 = res_39752;
										if (!((sub_39719[k_39737] == s_39718[(k_39737 + j_39727)]))) {
										break L4;
										}
										
										res_39752 += 1;
									}
							} while(false);
						} while(false);
						result_39722 = j_39727;
						break BeforeRet;
					} while(false);
					j_39727 += a_39717[s_39718[(j_39727 + m_39725)]];
				}
		} while(false);
		result_39722 = -1;
		break BeforeRet;
	} while (false);

	return result_39722;

}

function nsuReplaceStr(s_40897, sub_40898, by_40899) {
	var result_40900 = null;

		var a_40901 = [new Int32Array(256)];
		result_40900 = nimCopy(null, makeNimstrLit(""), NTI138);
		nsuInitSkipTable(a_40901[0], sub_40898);
		var last_40904 = (s_40897 != null ? (s_40897.length-2) : -1);
		var i_40905 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var j_40906 = nsuFindStrA(a_40901[0], s_40897, sub_40898, i_40905, last_40904);
					if ((j_40906 < 0)) {
					break L1;
					}
					
					if (result_40900 != null) { result_40900 = (result_40900.slice(0, -1)).concat((s_40897.slice(i_40905, ((j_40906 - 1))+1).concat(0))); } else { result_40900 = (s_40897.slice(i_40905, ((j_40906 - 1))+1).concat(0));};
					if (result_40900 != null) { result_40900 = (result_40900.slice(0, -1)).concat(by_40899); } else { result_40900 = by_40899;};
					i_40905 = (j_40906 + (sub_40898 != null ? sub_40898.length-1 : 0));
				}
		} while(false);
		if (result_40900 != null) { result_40900 = (result_40900.slice(0, -1)).concat((s_40897.slice(i_40905))); } else { result_40900 = (s_40897.slice(i_40905));};

	return result_40900;

}

function dollar__53034(p_53036) {
	var result_53037 = null;

	var F={procname:"ech_mat.$",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((p_53036.deno == 1))) {
		F.line = 36;
		result_53037 = nimCopy(null, (makeNimstrLit("\"").slice(0,-1)).concat(cstrToNimstr((p_53036.nume)+"").slice(0,-1),makeNimstrLit("/").slice(0,-1),cstrToNimstr((p_53036.deno)+"").slice(0,-1),makeNimstrLit("\"")), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 38;
			result_53037 = nimCopy(null, (makeNimstrLit("\"").slice(0,-1)).concat(cstrToNimstr((p_53036.nume)+"").slice(0,-1),makeNimstrLit("\"")), NTI138);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_53037;

}

function addQuoted_54218(s_54222, s_54222_Idx, x_54224) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3976;
		if (s_54222[s_54222_Idx] != null) { s_54222[s_54222_Idx] = (s_54222[s_54222_Idx].slice(0, -1)).concat(dollar__53034(x_54224)); } else { s_54222[s_54222_Idx] = dollar__53034(x_54224);};
	framePtr = F.prev;

	
}

function collectionToString_54017(x_54021, prefix_54023, separator_54025, suffix_54027) {
	var result_54028 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2538;
		result_54028[0] = nimCopy(null, prefix_54023, NTI138);
		F.line = 2539;
		var firstElement_54029 = true;
		L1: do {
			F.line = 2540;
			var value_54202 = null;
			F.line = 3805;
			var i_54604 = 0;
			F.line = 3806;
			var L_54606 = (x_54021 != null ? x_54021.length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_54604 < L_54606)) break L3;
						F.line = 3808;
						value_54202 = x_54021[chckIndx(i_54604, 0, x_54021.length+0-1)-0];
						if (firstElement_54029) {
						F.line = 2542;
						firstElement_54029 = false;
						}
						else {
							F.line = 2544;
						if (result_54028[0] != null) { result_54028[0] = (result_54028[0].slice(0, -1)).concat(separator_54025); } else { result_54028[0] = separator_54025;};
						}
						
						if ((value_54202 === null)) {
						F.line = 2549;
						if (result_54028[0] != null) { result_54028[0] = (result_54028[0].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_54028[0] = makeNimstrLit("nil");};
						}
						else {
							F.line = 2551;
						addQuoted_54218(result_54028, 0, value_54202);
						}
						
						F.line = 3809;
						i_54604 = addInt(i_54604, 1);
						if (!(((x_54021 != null ? x_54021.length : 0) == L_54606))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2555;
		if (result_54028[0] != null) { result_54028[0] = (result_54028[0].slice(0, -1)).concat(suffix_54027); } else { result_54028[0] = suffix_54027;};
	framePtr = F.prev;

	return result_54028[0];

}

function dollar__54002(x_54007) {
		var Tmp1;

	var result_54008 = null;

	var F={procname:"$.$",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2566;
		if ((x_54007 === null)) {
		Tmp1 = makeNimstrLit("nil");
		}
		else {
		Tmp1 = collectionToString_54017(x_54007, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]"));
		}
		
		result_54008 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_54008;

}

function addQuoted_53818(s_53822, s_53822_Idx, x_53824) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3976;
		if (s_53822[s_53822_Idx] != null) { s_53822[s_53822_Idx] = (s_53822[s_53822_Idx].slice(0, -1)).concat(dollar__54002(x_53824)); } else { s_53822[s_53822_Idx] = dollar__54002(x_53824);};
	framePtr = F.prev;

	
}

function collectionToString_53618(x_53622, prefix_53624, separator_53626, suffix_53628) {
	var result_53629 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2538;
		result_53629[0] = nimCopy(null, prefix_53624, NTI138);
		F.line = 2539;
		var firstElement_53630 = true;
		L1: do {
			F.line = 2540;
			var value_53802 = null;
			F.line = 3805;
			var i_54804 = 0;
			F.line = 3806;
			var L_54806 = (x_53622 != null ? x_53622.length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_54804 < L_54806)) break L3;
						F.line = 3808;
						value_53802 = x_53622[chckIndx(i_54804, 0, x_53622.length+0-1)-0];
						if (firstElement_53630) {
						F.line = 2542;
						firstElement_53630 = false;
						}
						else {
							F.line = 2544;
						if (result_53629[0] != null) { result_53629[0] = (result_53629[0].slice(0, -1)).concat(separator_53626); } else { result_53629[0] = separator_53626;};
						}
						
						if ((value_53802 === null)) {
						F.line = 2549;
						if (result_53629[0] != null) { result_53629[0] = (result_53629[0].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_53629[0] = makeNimstrLit("nil");};
						}
						else {
							F.line = 2551;
						addQuoted_53818(result_53629, 0, value_53802);
						}
						
						F.line = 3809;
						i_54804 = addInt(i_54804, 1);
						if (!(((x_53622 != null ? x_53622.length : 0) == L_54806))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2555;
		if (result_53629[0] != null) { result_53629[0] = (result_53629[0].slice(0, -1)).concat(suffix_53628); } else { result_53629[0] = suffix_53628;};
	framePtr = F.prev;

	return result_53629[0];

}

function dollar__53603(x_53608) {
		var Tmp1;

	var result_53609 = null;

	var F={procname:"$.$",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2566;
		if ((x_53608 === null)) {
		Tmp1 = makeNimstrLit("nil");
		}
		else {
		Tmp1 = collectionToString_53618(x_53608, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]"));
		}
		
		result_53609 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_53609;

}

function main(mat_s_53598) {
	var result_53599 = null;

	var F={procname:"ech_mat.main",prev:framePtr,filename:"ech_mat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 120;
		var mat_53600 = parseMatrix_53082(mat_s_53598);
		F.line = 121;
		var res_53601 = echelonize_53436(mat_53600);
		F.line = 123;
		result_53599 = toJSStr(nsuReplaceStr(dollar__53603(res_53601), makeNimstrLit("@"), makeNimstrLit("")));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53599;

}
